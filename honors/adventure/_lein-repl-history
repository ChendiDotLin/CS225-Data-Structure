(require '[clojure.core.match :refer [match])
(require '[clojure.core.match :refer [match]])
(match [:take :book]
   [:take x] 
"You took something.
")
(foo 123)
(match [:x 10]
   [:y v]  (str "You used :y on " v)
   [:x v]  (str "You used :x on " (inc v)))
(require '[clojure.core.match :refer [match])
(require '[clojure.core.match :refer [match]])
(match [:x 10]
   [:y v]  (str "You used :y on " v)
   [:x v]  (str "You used :x on " (inc v)))
(the-map :foyer)
(#{1 2 3} 4)
(#{1 2 3} 3)
(-> the-map :foyer)
(-> the-map :foyer :title)
(status adventurer)
(assoc-in adventurer :x 10)
(doc assoc-in)
(assoc-in adventurer [:x] 10)
(assoc-in adventurer [:x :z] 10)
(update-in adventurer [:before] #(conj % :foyer))
(get-in adventurer [:before])
(status adventurer)
(let [ foo (status adventurer)] (status foo))
(main)
(-main)
(to-keywords (read-line))
(-main)
(< :a :x)
(compare :a :x)
(10 20)
foo(30,40)
(lazy-cat '(1 2 3))
(concat '(1 2 3) '(4 5 6))
(defn my-inc [x] (println "Incremented " x) (inc x))
(my-inc 10)
(def nats (lazy-cat '(1) (map my-inc nats)))
(take 3 nats)
(defn plus [a b]
(println "Added" a " and " b)
(+ a b))
(plus 2 3)
(def fibs (lazy-cat '( 1 1) (map plus fibs (rest fibs))))
(take 10 fibs)
(take 20 fibs)
(doc memoize)
(def fib [x]
(if (< x 3) 1
    (+ (fib (dec x)) (fib (dec (dec x))))))
(defn fib [x]
(if (< x 3) 1
    (+ (fib (dec x)) (fib (dec (dec x))))))
(fib 10)
(fib 20)
(fib 30)
(fib 40)
(def mfib (memoize fib))
(mfib 40)
(mfib 45)
